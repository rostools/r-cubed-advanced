---
execute:
  eval: false
---

```{r setup}
#| eval: true
#| include: false
library(tidyverse)
library(downlit)
```

# Download the workshop data {#sec-download-data}

We're going to use a real world dataset to demonstrate the concepts in
this workshop. We're going to use an openly licensed dataset with
metabolomics data [@Herance2022].

Similar to the intermediate workshop, we will follow the principle of
building a reproducible pipeline, from raw data to the report on the
analysis. We'll also follow the principle of keeping the raw data *raw*
and use code to tidy it up. The ultimate goal is to have a record of how
we *exactly* went from raw data to results in the paper. Unlike the
intermediate workshop where you had to write through each step of the
script and what you needed to do, in this workshop you only need to copy
and paste the code that will download and minimally process the dataset
into an initially workable state. If you want to learn more about how to
take a raw data set and process it into a format that is more suitable
for analysis, check out the [intermediate
workshop](https://r-cubed-intermediate.rostools.org/).

Inside the `data-raw/` folder, we are going to write R code that
downloads a dataset, processes it into a more tidy format, and save it
into the `data/` folder. This is the start of our analysis pipeline.
First step, we need to create the script to do these steps. While in
your `AdvancedR3` R Project, go to the Console pane in RStudio and type
out:

```{r create-data-raw}
#| filename: Console
#| purl: true
usethis::use_data_raw("nmr-omics")
```

What this function does is create a new folder called `data-raw/` and
creates an R script called `nmr-omics.R` in that folder. This is where
we will store the raw, original metabolomics data that we'll get from
the [website](https://zenodo.org/record/6597902). If you go to the
website with the dataset, you'll notice (when you scroll down) that
there are three files: A README file, a metabolomics `.xlsx` file, and a
lipidomics `.xlsx` file. For now, we only want the README file and
lipidomics dataset.

The R script should have opened up for you, otherwise, go into the
`data-raw/` folder and open up the new `nmr-omics.R` script. The first
thing to do is delete all the code in the script. Than, copy and paste
the code below into the script.

```{r, file=here::here('data-raw/nmr-omics.R'), filename="data-raw/nmr-omics.R"}
```

```{r purl-only-paste-processing-code}
#| echo: false
#| purl: true
readLines(
  "https://raw.githubusercontent.com/rostools/r-cubed-advanced/main/data-raw/nmr-omics.R"
) |>
  writeLines(usethis::proj_path("data-raw/nmr-omics.R"))
source(usethis::proj_path("data-raw/nmr-omics.R"))
```

Since this is an advanced workshop, you can run the lines one at a time
and see what they do on your own (or `source()` them all at once). The
comments provided give guidance on what the code is doing and why. In
the end, though, the only important thing is to run all the code and get
the `lipidomics` dataset to be saved as `data/lipidomics.csv`. The
created files should look like this:

```{r}
#| echo: false
fs::dir_tree(regexp = "data(-raw)?")
```

``` text
AdvancedR3
├── data
│   └── lipidomics.csv
└── data-raw
    ├── nmr-omics
    │   ├── README.txt
    │   └── lipidomics.xlsx
    └── nmr-omics.R
```

And when using `readr::read_csv()`, the created dataset in
`data/lipidomics.csv` should look like:

```{r}
#| eval: true
readr::read_csv(here::here("data/lipidomics.csv"))
```

Take a look through the downloaded `data-raw/nmr-omics/README.txt` and
`data-raw/nmr-omics/lipidomics.xlsx` files, as well as the created
`data/lipidomics.csv` to begin better understanding the dataset.

We are using Git to track changes made to files in our project. The
original metabolomics dataset is stored on Zenodo, so we don't actually
need to keep the raw data files in our Git history. So let's tell Git to
ignore the files created in the `data-raw/nmr-omics/` folder. In the
Console, type out the code below. You only need to do this once.

```{r ignore-xlsx-files}
#| filename: Console
#| purl: true
usethis::use_git_ignore("data-raw/nmr-omics/")
```

```{r purl-only-processing-data}
#| echo: false
#| purl: true
git_ci(
  c("data-raw/nmr-omics.R", "data/lipidomics.csv", ".gitignore", "DESCRIPTION"),
  "Script to process omics data into lipidomics csv."
)
```

Next, run this command to check that everything is setup correctly. You
will need to paste this output into the survey at the end.

``` {.r filename="Console"}
r3::check_project_setup_advanced()
```

```
Show folders and files of project:
• Please copy and paste this output into the survey question:
/home/luke/Desktop/AdvancedR3
├── AdvancedR3.Rproj
├── DESCRIPTION
├── R
│   ├── README.md
│   └── functions.R
├── README.md
├── TODO.md
├── data
│   ├── README.md
│   └── lipidomics.csv
├── data-raw
│   ├── README.md
│   ├── nmr-omics
│   │   ├── README.txt
│   │   └── lipidomics.xlsx
│   └── nmr-omics.R
└── doc
    ├── README.md
    ├── learning.qmd
    └── report.Rmd
```

The output should look something a bit like the above text. If it
doesn't, start over by deleting everything in the `data-raw/` folder
*except* for the `data-raw/nmr-omics.R` script and rerunning the script
again. If your output looks a bit like the above, than copy and paste
the output into the survey question at the end.

## Automatically adhere to a style guide

We've covered how to adhere to a style guide in both the introductory and
intermediate workshop, because it is such a useful and
powerful tool to easily write more readable code. We'll expand on it in
this workshop because it fits precisely with the theme of collaboration.
That's because, when you're working on your own and don't need to worry
about anyone seeing your code, there's a natural temptation to write
your code like you might write notes to yourself: scribbled and scrawled
down quickly.

But when working with others, how it looks can greatly impact how
quickly and easily others are able to read and interpret your code.
Multiply all the collaborators on a project with this natural temptation
for quick (and potentially sloppy) coding, you can imagine how easy it
is for code to massively "drift" towards being poorly formatted,
especially when deadlines are approaching.

That's when "linters" or "stylers" (types of static code analysis tools)
become very useful. They scan your code for common mistakes or syntax
issues, either listing them for you to fix or automatically fixing them
for you. Linters are especially useful when collaborating with someone
who is less experienced with coding or who contribute occasionally to
assist in the code being consistently formatted across the project.

To ensure consistent styling without needing to run checks manually,
*automatic* linting/styling can be a great solution. That's where the
`{styler}` package comes in!

There are only a few functions in `{styler}` that we can to use. The
first is used to style a single file with R code in it using
`styler::style_file()`. However, an easier way to style the file we're
currently working on is the "style active file" RStudio addin. We use
that through the Command Palette ({{< var keybind.palette >}}) and
typing "style file", which should show the "Style active file" option.
This is what we will do frequently throughout the workshop.

Let's try it out. While inside the `data-raw/nmr-omics.R` file, use
{{< var keybind.styler >}} to style the file. Notice that no changes
were made since the file is already tidy.

::: {.callout-note appearance="default"}
You will probably be asked to install a package called `{miniUI}`, click
"Yes".
:::

If you wanted to run `{styler}` on all the files, we can use:

```{r style-dir}
#| eval: false
#| filename: Console
styler::style_dir()
```

{{< include /includes/_code-appendix.qmd >}}
