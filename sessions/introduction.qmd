# Introduction to course {#sec-introduction}

> [**Introduction slides**](../slides/introduction.html)

<div>

```{=html}
<iframe class="slide-deck" src="../slides/introduction.html"></iframe>
```

</div>

::: {.callout-note collapse="true"}
## Instructor note

The slides contain speaking notes that you can view by pressing 'S' on
the keyboard.
:::

## The Big Picture {#sec-big-picture}

::: callout-note
## Reading task: \~10 minutes

This section provides a bigger-picture view of what we will be doing,
why we want to do it, how we will go about doing it, and what it will
look like in the end.

Our big picture aim is to create a data analysis project that:

1.  Makes it easier for collaborators and others to contribute directly
2.  Explicitly includes the processing and analysis steps (as code), so
    they are reproducible
3.  Incorporates general-purpose tools that simplify the use or
    switching of statistical analysis methods

All of this will be exemplified through a simple analysis of a
lipidomics dataset during the course.

<!-- TODO: Pipeline, workflow image? -->

Where will we start end where will be end, in a more “tangible” way? The
most tangible things are the folders and files on our computers. The
folder and file structures below show where we start and where we end,
so you can hopefully get a better understanding of how things will look.

::: panel-tabset
### Initial project structure

Right now, your initial project structure should look like this:

```         
LearnR3
├── data/
│   ├── lipidomics.csv
│   └── README.md
├── data-raw/
│   ├── README.md
│   ├── nmr-omics/
│   │  ├── lipidomics.xlsx
│   │  └── README.txt
│   └── nmr-omics.R
├── doc/
│   ├── README.md
│   ├── learning.qmd
│   └── report.Rmd
├── R/
│   ├── functions.R
│   └── README.md
├── .gitignore
├── DESCRIPTION
├── LearnR3.Rproj
├── README.md
└── TODO.md
```

### Final project structure

At the end of this course, it should look something like:

<!-- TODO: Paste from final output of running code in -->

```         
```
:::

Why do we structure it this way?

-   To follow "project-oriented" workflows (covered in
    @sec-smoother-collaboration).
-   To follow some standard conventions in R, like having a
    `DESCRIPTION` file (which is important for
    @sec-smoother-collaboration).
-   To keep types of files separate, like raw data raw and in the
    `data-raw/` folder, R scripts/functions in the `R/` folder, and
    documents like R Markdown / Quarto files in `doc/`.

This structure also supports our workflow and processes throughout the
course, which will be to:

-   Track package dependencies in the `DESCRIPTION` file.
-   Follow a "function-oriented" workflow, where we use R Markdown /
    Quarto (`doc/learning.qmd`) to write and test out code, convert it
    into a function, test it, and then move it into `R/functions.R`.
    -   We develop functions in the `learning.qmd` file to make it a bit
        easier to quickly test the code and make sure it works before
        moving it over into a more formal location and structure. Think
        of this file as a sandbox to test out and play with code,
        without fear of messing things up.
    -   We also test the code in `learning.qmd` because, *from a
        teaching and learning perspective*, it's easier to integrate
        text and comments with the code during the code-alongs in
        markdown files.
    -   We keep functions in a separate `functions.R` file because we
        will frequently `source()` from it as we prototype and test out
        code in the `learning.qmd` file. This also creates a clear
        separation between "finalized" code and prototype code.
-   Use a combination of restarting R with {{< var keybind.restart-r >}}
    (or `Session -> Restart R`) and using `source()`
    ({{< var keybind.source >}} while in `R/functions.R`) to run the
    functions inside of `R/functions.R`.
    -   We restart R because it to ensure that the R workspace is
        completely clear. For reproducibility, we should always aim to
        work from a "clean plate".
-   Keep code readable by having the formatting/styling of our code
    fixed automatically.
-   For each "output" (like a figure or a table) in a paper, write one
    or more functions to generate it and include each function as steps
    or "targets" in a pipeline. Use the pipeline to track and order the
    steps in the data analysis.
-   Write accompanying text (which outside this course could be a full
    paper) for the analysis in Markdown so we can easily and quickly
    regenerate reports for rapid dissemination.
-   Automatically reformat Markdown text into a standard, more readable
    format.
-   Whenever we complete a task, we *add and commit* those file changes
    to save them in the Git history with {{< var keybind.git >}}.
    -   We use Git to keep track of what changes was made to the files,
        when, and why. This keeps our work transparent and makes it
        easier to share the code by uploading it to GitHub. Version
        control aligns with the philosophy of reproducible science and
        should be a standard practice (it usually isn't, which is why we
        practice it here).

Many of these "project setup" tasks can be time-consuming, difficult and
confusing - and this is before you've even gotten to the analysis phase
of your work.

A good analogy for these first steps is when skyscrapers are built:
Watching construction on these projects makes it feel like it takes
forever for them to finally start going up and adding floors. But once
they start adding floors, it goes up so fast! That's because a lot of
the main work is in building up the foundation of the building, so that
it is strong and stable. This is the same with analysis projects, the
first phase feels like nothing is "moving" but you are building the
foundation to everything that comes after.

::: {.callout-tip appearance="default"}
If you finish exercises faster than others in the course, try your hand
at working through the [Extra
Exercises](../appendix/extra-exercises.qmd) section. It is still a
work-in-progress, so there are only a few exercises available right now.
:::
