---
execute:
  eval: false
---

```{r setup}
#| eval: true
#| include: false
library(tidyverse)
library(targets)
library(downlit)
library(pak)
```

# Pre-course tasks {#sec-pre-course}

In order to participate in this course, you must complete the pre-course
tasks in this section as well as **completing the
[survey](https://docs.google.com/forms/d/e/1FAIpQLSfzTLrLFyQHj79YGaCQDN5fUZ_9et1qdmtDGiq6gNPGzFSCyQ/viewform?usp=sf_link)**
at the end. These tasks are designed to make it easier for everyone to
start the course with everything ready to go. For some of the tasks, you
might not understand why you need to do them, but you will likely
understand why once the course begins.

Depending on your skills and knowledge, these tasks could take between
**5-7 hrs to finish**, so we suggest planning a full day to complete
them. Depending on your institution and how they handle installing
software on work computers, you also might have to contact IT *very
early* to make sure everything is properly installed and set up.

## List of tasks

Here's a quick overview of the tasks you need to do. Specific details
about them are found as you work through this section.

1.  Read the learning objectives in @sec-pre-course-learning-objectives
    for the pre-course tasks.
2.  Read about how to read this website in @sec-reading-website.
3.  Install the necessary programs and the right versions of those
    programs in @sec-install-programs. For some people, depending on
    their institution, this task can take the **longest amount of time**
    because you have to contact your IT to install these packages.
4.  Install the necessary R packages in @sec-install-r-packages.
5.  Correctly set up Git on your computer in @sec-setup-git, if you
    haven't done this already from previous courses. If you haven't used
    Git before, this task could take a while because of the reading.
6.  Run a check with `r3::check_setup()` to see if everything works.
    You'll later need to paste this output into the survey.
7.  Connect your computer with GitHub in @sec-connect-github.
8.  Create an R Project in @sec-create-project, along with the folder
    and file setup.
9.  Create a Quarto file.
10. Write (well, mostly copy and paste) R code to download the data and
    save it to your computer. This task will probably take up maybe
    30-60 minutes depending on your interest in exploring the data.
11. Run a check using `r3::check_project_setup_advanced()` to see that
    everything is as expected. You'll later need to paste this output
    into the survey.
12. Set some options in RStudio in @sec-quality-of-life.
13. Read about the basic course details in @sec-course-details.
14. Read the syllabus in @sec-syllabus.
15. Read the [Code of
    Conduct](https://guides.rostools.org/conduct.html).
16. Pre-read some content in @sec-pre-reading.
17. **Complete the pre-course
    [survey](https://docs.google.com/forms/d/e/1FAIpQLSfzTLrLFyQHj79YGaCQDN5fUZ_9et1qdmtDGiq6gNPGzFSCyQ/viewform?usp=sf_link)**.
    This survey is pretty quick, maybe \~10 minutes.

Check each section for exact details on completing these tasks.

## Learning objective {#sec-pre-course-learning-objectives}

In general, these pre-course tasks are meant to help prepare you for the
course and make sure everything is setup properly so the first session
runs smoothly. However, some of these tasks are meant for learning as
well as for general setup, so we have defined the following learning
objectives for this page:

1.  Learn about and then apply some basic reproducible workflows and
    setups for the initial processing of raw data. For those who have
    already participated in the [intermediate R
    course](https://r-cubed-intermediate.rostools.org/), the objective
    is to review what you previously learned.

## Reading the course website {#sec-reading-website}

```{r}
#| echo: false
#| eval: true
#| results: asis
cat(r3admin::read_common("reading-website.md"), sep = "\n")
```

## Installing the latest programs {#sec-install-programs}

```{r}
#| echo: false
#| eval: true
#| results: asis
cat(r3admin::read_common("installing-programs.md"), sep = "\n")
```

## Installing the R packages {#sec-install-r-packages}

```{r}
#| echo: false
#| eval: true
#| results: asis
cat(r3admin::read_template_pkg_install("advanced"))
```

## Setting up Git {#sec-setup-git}

Since Git has already been covered in the previous courses, we won't
cover *learning it* during this course. However, since version control
is a fundamental component of any modern data analysis workflow and
*should be used*, we **will be using it throughout the course**. If you
have used or currently use Git and GitHub, you can skip these two tasks.
If you **have not used Git or GitHub**, please do these tasks:

1.  Type in the RStudio Console and follow the instructions:

    ``` {.r filename="Console"}
    # There will be a pop-up to type in your name (first and 
    # last), as well as your email
    r3::setup_git_config()
    ```

2.  **Please ONLY read** through the [Version Control
    lesson](https://r-cubed-intro.rostools.org/sessions/version-control.html)
    of the introduction course, **but DO NOT DO any coding tasks or exercises**.
    You are welcome to do them if it will
    help you learn or understand it better, but it is **NOT** required. For most of the course, we
    will be using Git as shown in the [Using Git in
    RStudio](https://r-cubed-intro.rostools.org/sessions/version-control.html#using-git-in-rstudio)
    section. During the course, we will connect our projects to GitHub,
    which is described below.

Regardless of whether you've done the steps above or not, *everyone*
needs to run:

``` {.r filename="Console"}
r3::check_setup()
```

The output you'll get for success will look something like this:

```         
Checking R version:
✔ Your R is at the latest version of 4.4.1!
Checking RStudio version:
✔ Your RStudio is at the latest version of 2024.9.0.375!
Checking Git config settings:
✔ Your Git configuration is all setup!
  Git now knows that:
  - Your name is 'Luke W. Johnston'
  - Your email is 'lwjohnst@gmail.com'
```

**Eventually you will need to copy and paste the output into one of the
survey questions**. *Note* that while GitHub is a natural connection to
using Git, given the limited time available, we will only be going over
aspects of GitHub that relate to storing your project Git repository and
working together. If you want to learn more about using GitHub, check
out the
[session](https://r-cubed-intro.rostools.org/sessions/version-control.html)
on it in the introduction course.

## Connect with GitHub {#sec-connect-github}

Because we'll be pushing and pulling to GitHub throughout the course, as
well as using GitHub to collaborate with others in the project work, you
need to setup your computer to connect with GitHub. 

```{r}
#| echo: false
#| eval: true
#| results: asis
cat(r3admin::read_common("github-authenticate.md"), sep = "\n")
```

## Create an R Project {#sec-create-project}

One of the basic steps to reproducibility and modern workflows in data
analysis is to keep everything contained in a single location. In
RStudio, this is done with R Projects. Please read all of [this
section](https://r-cubed-intro.rostools.org/sessions/project-management.html#what-is-a-project-and-why-use-it)
from the introduction course to learn about R Projects and how they help
keep things self-contained. *You don't need to do any of the exercises
or activities*.

There are several ways to organise a project folder. We'll be using the
structure from the package
[prodigenr](https://rostools.github.io/prodigenr/). The project setup
can be done by either:

1.  Using RStudio's New Project menu item: "File -\> New Project -\> New
    Directory", scroll down to "Scientific Analysis Project using
    prodigenr" and name the project "AdvancedR3" in the Directory Name,
    saving it to the "Desktop" with Browse. **Note**: You might need to
    restart RStudio if you don't see this option.
2.  Or, running the command
    `prodigenr::setup_project("~/Desktop/AdvancedR3")` (or other
    location like `Documents`) in the R Console and manually switching
    to it using: `File -> Open Project` and navigating to the project
    location.

```{r purl-only-run-prodigenr}
#| echo: false
#| purl: true
prodigenr::setup_project("~/Desktop/AdvancedR3")
usethis::local_project("~/Desktop/AdvancedR3")
```

When the RStudio Project opens up again, run these commands in the R
Console to finish the setup:

```{r more-project-setup}
#| filename: Console
#| purl: true
# Add Git to the project
prodigenr::setup_with_git()
# Create a `functions.R` file in the `R/` folder
usethis::use_r("functions", open = FALSE)
# Ignore this file that gets created by some usethis functions
usethis::use_git_ignore(".Rbuildignore")
# Set some project options to start fresh each time
usethis::use_blank_slate("project")
```

```{r purl-only-first-commit}
#| echo: false
#| purl: true
git_ci(".", "First commit.")
```

Here we use the `{usethis}` package to help set things up. `{usethis}`
is an extremely useful package for managing R Projects and we highly
recommend checking it out more to see how you can use it in your own
work.

## R Markdown and Quarto

We teach and use R Markdown/Quarto because it is one of the very first
steps to being reproducible and because it is a very powerful tool to
doing data analysis. You may have heard of or used R Markdown since
we've used it in both the introduction and intermediate courses.
However, you might not have heard of or used Quarto.

Quarto is a next generation version of R Markdown and chances are, if
you use a fairly recent version of RStudio, you are already using it
without realizing it. That's because Quarto uses the same Markdown
syntax as R Markdown. The only difference is that with Quarto, you can
create more types of output documents (like books, websites, slides),
you have more options for customization, and it's easier to do and learn
than R Markdown. So, for this course, we will use Quarto to create a
report that includes the analysis we will do over the course.

Please do these two tasks:

1.  Please read over the [R Markdown/Quarto
    section](https://r-cubed-intro.rostools.org/sessions/reproducible-documents.html)
    of the introduction course. If you use R Markdown or Quarto already,
    you can skip this step.

2.  In the R Console while inside the `AdvancedR3` project, run the
    function to create a new Quarto file called `learning.qmd` in the
    `doc/` folder.

```{r add-rmarkdown-doc}
#| filename: Console
#| purl: true
r3::create_qmd_doc()
```

```{r purl-only-add-lesson-rmd}
#| echo: false
#| purl: true
git_ci("doc/learning.qmd", "Add draft lesson qmd file.")
```

## Download the course data {#sec-download-data}

We're going to use a real world dataset to demonstrate the concepts in
this course. We're going to use an openly licensed dataset with
metabolomics data [@Herance2022].

Similar to the intermediate course, we will follow the principle of
building a reproducible pipeline, from raw data to the report on the
analysis. We'll also follow the principle of keeping the raw data *raw*
and use code to tidy it up. The ultimate goal is to have a record of how
we *exactly* went from raw data to results in the paper. Unlike the
intermediate course where you had to write through each step of the
script and what you needed to do, in this course you only need to copy
and paste the code that will download and minimally process the dataset
into an initially workable state. If you want to learn more about how to
take a raw data set and process it into a format that is more suitable
for analysis, check out the [intermediate
course](https://r-cubed-intermediate.rostools.org/).

Inside the `data-raw/` folder, we are going to write R code that
downloads a dataset, processes it into a more tidy format, and save it
into the `data/` folder. This is the start of our analysis pipeline.
First step, we need to create the script to do these steps. While in
your `AdvancedR3` R Project, go to the Console pane in RStudio and type
out:

```{r create-data-raw}
#| filename: Console
#| purl: true
usethis::use_data_raw("nmr-omics")
```

What this function does is create a new folder called `data-raw/` and
creates an R script called `nmr-omics.R` in that folder. This is where
we will store the raw, original metabolomics data that we'll get from
the [website](https://zenodo.org/record/6597902). If you go to the
website with the dataset, you'll notice (when you scroll down) that
there are three files: A README file, a metabolomics `.xlsx` file, and a
lipidomics `.xlsx` file. For now, we only want the README file and
lipidomics dataset.

The R script should have opened up for you, otherwise, go into the
`data-raw/` folder and open up the new `nmr-omics.R` script. The first
thing to do is delete all the code in the script. Than, copy and paste
the code below into the script.

```{r, file=here::here('data-raw/nmr-omics.R'), filename="data-raw/nmr-omics.R"}
```

```{r purl-only-paste-processing-code}
#| echo: false
#| purl: true
readLines("https://raw.githubusercontent.com/rostools/r-cubed-advanced/main/data-raw/nmr-omics.R") |>
  writeLines(usethis::proj_path("data-raw/nmr-omics.R"))
source(usethis::proj_path("data-raw/nmr-omics.R"))
```

Since this is an advanced course, you can run the lines one at a line
and see what they do on your own (or `source()` them all at once). The
comments provided give guidance on what the code is doing and why. In
the end, though, the only important thing is to run all the code and get
the `lipidomics` dataset to be saved as `data/lipidomics.csv`. The
created files should look like this:

```{r}
#| echo: false
fs::dir_tree(regexp = "data(-raw)?")
```

``` text
AdvancedR3
├── data
│   └── lipidomics.csv
└── data-raw
    ├── nmr-omics
    │   ├── README.txt
    │   └── lipidomics.xlsx
    └── nmr-omics.R
```

And when using `readr::read_csv()`, the created dataset in
`data/lipidomics.csv` should look like:

```{r}
#| eval: true
readr::read_csv(here::here("data/lipidomics.csv"))
```

Take a look through the downloaded `data-raw/nmr-omics/README.txt` and
`data-raw/nmr-omics/lipidomics.xlsx` files, as well as the created
`data/lipidomics.csv` to begin better understanding the dataset.

We are using Git to track changes made to files in our project. The
original metabolomics dataset is stored on Zenodo, so we don't actually
need to keep the raw data files in our Git history. So let's tell Git to
ignore the files created in the `data-raw/nmr-omics/` folder. In the
Console, type out the code below. You only need to do this once.

```{r ignore-xlsx-files}
#| filename: Console
#| purl: true
usethis::use_git_ignore("data-raw/nmr-omics/")
```

```{r purl-only-processing-data}
#| echo: false
#| purl: true
git_ci(
  c("data-raw/nmr-omics.R", "data/lipidomics.csv", ".gitignore", "DESCRIPTION"),
  "Script to process omics data into lipidomics csv."
)
```

Next, run this command to check that everything is setup correctly. You
will need to paste this output into the survey at the end.

``` {.r filename="Console"}
r3::check_project_setup_advanced()
```

```         
Show folders and files of project:
• Please copy and paste this output into the survey question:
/home/luke/Desktop/AdvancedR3
├── AdvancedR3.Rproj
├── DESCRIPTION
├── R
│   ├── README.md
│   └── functions.R
├── README.md
├── TODO.md
├── data
│   ├── README.md
│   └── lipidomics.csv
├── data-raw
│   ├── README.md
│   ├── nmr-omics
│   │   ├── README.txt
│   │   └── lipidomics.xlsx
│   └── nmr-omics.R
└── doc
    ├── README.md
    ├── learning.qmd
    └── report.Rmd
```

The output should look something a bit like the above text. If it
doesn't, start over by deleting everything in the `data-raw/` folder
*except* for the `data-raw/nmr-omics.R` script and re-running the script
again. If your output looks a bit like the above, than copy and paste
the output into the survey question at the end.

## Set some quality of life options {#sec-quality-of-life}

Some of the most common "issues" we encounter in the course when it
comes to Git are caused by files not being saved so the changes can't be
seen by Git. To help with this, we suggest turning on some options in
RStudio. While, there are many options inside the Global Options in
RStudio that can help you work better and faster, the two we want you to
to use will help you and us out during the course:

-   Go into `Tools -> Global Options -> Code -> Saving`.
    -   Under the heading "General", tick on all of those check boxes.
    -   Under the heading "Auto-save", tick on both those check boxes.

## Course introduction {#sec-course-details}

Most of the course description is found in the syllabus (@sec-syllabus).
If you haven't read it, **please read it now**. Read over what the
course will cover, what we expect you to learn at the end of it, and
what our basic assumptions are about who you are and what you know. The
final pre-course task is to complete a survey that asks if you've read
it and if it matches you.

We have a [Code of Conduct](https://guides.rostools.org/conduct.html).
If you haven't read it, **read it now**. The survey at the end will ask
about Conduct. We want to make sure this course is a supportive and safe
environment for learning, so this Code of Conduct is important.

## Brief pre-reading {#sec-pre-reading}

An important component of learning is repeated exposure to a concept or
skill. So, while we will tell you this information during the course,
and in many cases you will also read it *during* the course, we want to
introduce some repetition here by reading the sections list below. This
will not only mentally prepare you for the content of the course, but
will also give you a bigger overview of what you will be learning and
doing. So, please read:

1.  The "big picture" in @sec-big-picture.
2.  Each sessions learning objectives:
    -   Collaboration: @sec-smoother-collaboration-learning-objectives.
    -   Pipelines: @sec-pipelines-learning-objectives.
    -   Analysis basics: @sec-stats-analyses-basic-learning-objectives.
    -   Multiple analyses: @sec-stats-analyses-multiple-learning-objectives.

## Fill in survey {#sec-survey}

You're almost done! :tada: Please fill out the [**pre-course
survey**](https://docs.google.com/forms/d/e/1FAIpQLSfzTLrLFyQHj79YGaCQDN5fUZ_9et1qdmtDGiq6gNPGzFSCyQ/viewform?usp=sf_link)
to finish this assignment.

See you at the course!

{{< include /includes/_code-appendix.qmd >}}
